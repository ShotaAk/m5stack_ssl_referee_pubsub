/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8-dev */

#ifndef PB_SSL_GC_REFEREE_MESSAGE_PB_H_INCLUDED
#define PB_SSL_GC_REFEREE_MESSAGE_PB_H_INCLUDED
#include "pb.h"
#include "ssl_gc_game_event.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* These are the "coarse" stages of the game. */
typedef enum _Referee_Stage {
    /* The first half is about to start.
 A kickoff is called within this stage.
 This stage ends with the NORMAL_START. */
    Referee_Stage_NORMAL_FIRST_HALF_PRE = 0,
    /* The first half of the normal game, before half time. */
    Referee_Stage_NORMAL_FIRST_HALF = 1,
    /* Half time between first and second halves. */
    Referee_Stage_NORMAL_HALF_TIME = 2,
    /* The second half is about to start.
 A kickoff is called within this stage.
 This stage ends with the NORMAL_START. */
    Referee_Stage_NORMAL_SECOND_HALF_PRE = 3,
    /* The second half of the normal game, after half time. */
    Referee_Stage_NORMAL_SECOND_HALF = 4,
    /* The break before extra time. */
    Referee_Stage_EXTRA_TIME_BREAK = 5,
    /* The first half of extra time is about to start.
 A kickoff is called within this stage.
 This stage ends with the NORMAL_START. */
    Referee_Stage_EXTRA_FIRST_HALF_PRE = 6,
    /* The first half of extra time. */
    Referee_Stage_EXTRA_FIRST_HALF = 7,
    /* Half time between first and second extra halves. */
    Referee_Stage_EXTRA_HALF_TIME = 8,
    /* The second half of extra time is about to start.
 A kickoff is called within this stage.
 This stage ends with the NORMAL_START. */
    Referee_Stage_EXTRA_SECOND_HALF_PRE = 9,
    /* The second half of extra time. */
    Referee_Stage_EXTRA_SECOND_HALF = 10,
    /* The break before penalty shootout. */
    Referee_Stage_PENALTY_SHOOTOUT_BREAK = 11,
    /* The penalty shootout. */
    Referee_Stage_PENALTY_SHOOTOUT = 12,
    /* The game is over. */
    Referee_Stage_POST_GAME = 13
} Referee_Stage;

/* These are the "fine" states of play on the field. */
typedef enum _Referee_Command {
    /* All robots should completely stop moving. */
    Referee_Command_HALT = 0,
    /* Robots must keep 50 cm from the ball. */
    Referee_Command_STOP = 1,
    /* A prepared kickoff or penalty may now be taken. */
    Referee_Command_NORMAL_START = 2,
    /* The ball is dropped and free for either team. */
    Referee_Command_FORCE_START = 3,
    /* The yellow team may move into kickoff position. */
    Referee_Command_PREPARE_KICKOFF_YELLOW = 4,
    /* The blue team may move into kickoff position. */
    Referee_Command_PREPARE_KICKOFF_BLUE = 5,
    /* The yellow team may move into penalty position. */
    Referee_Command_PREPARE_PENALTY_YELLOW = 6,
    /* The blue team may move into penalty position. */
    Referee_Command_PREPARE_PENALTY_BLUE = 7,
    /* The yellow team may take a direct free kick. */
    Referee_Command_DIRECT_FREE_YELLOW = 8,
    /* The blue team may take a direct free kick. */
    Referee_Command_DIRECT_FREE_BLUE = 9,
    /* The yellow team may take an indirect free kick. */
    Referee_Command_INDIRECT_FREE_YELLOW = 10,
    /* The blue team may take an indirect free kick. */
    Referee_Command_INDIRECT_FREE_BLUE = 11,
    /* The yellow team is currently in a timeout. */
    Referee_Command_TIMEOUT_YELLOW = 12,
    /* The blue team is currently in a timeout. */
    Referee_Command_TIMEOUT_BLUE = 13,
    /* The yellow team just scored a goal.
 For information only.
 For rules compliance, teams must treat as STOP.
 Deprecated: Use the score field from the team infos instead. That way, you can also detect revoked goals. */
    Referee_Command_GOAL_YELLOW = 14,
    /* The blue team just scored a goal. See also GOAL_YELLOW. */
    Referee_Command_GOAL_BLUE = 15,
    /* Equivalent to STOP, but the yellow team must pick up the ball and
 drop it in the Designated Position. */
    Referee_Command_BALL_PLACEMENT_YELLOW = 16,
    /* Equivalent to STOP, but the blue team must pick up the ball and drop
 it in the Designated Position. */
    Referee_Command_BALL_PLACEMENT_BLUE = 17
} Referee_Command;

/* Struct definitions */
/* Information about a single team. */
typedef struct _Referee_TeamInfo {
    /* The team's name (empty string if operator has not typed anything). */
    pb_callback_t name;
    /* The number of goals scored by the team during normal play and overtime. */
    uint32_t score;
    /* The number of red cards issued to the team since the beginning of the game. */
    uint32_t red_cards;
    /* The amount of time (in microseconds) left on each yellow card issued to the team.
 If no yellow cards are issued, this array has no elements.
 Otherwise, times are ordered from smallest to largest. */
    pb_callback_t yellow_card_times;
    /* The total number of yellow cards ever issued to the team. */
    uint32_t yellow_cards;
    /* The number of timeouts this team can still call.
 If in a timeout right now, that timeout is excluded. */
    uint32_t timeouts;
    /* The number of microseconds of timeout this team can use. */
    uint32_t timeout_time;
    /* The pattern number of this team's goalkeeper. */
    uint32_t goalkeeper;
    /* The total number of countable fouls that act towards yellow cards */
    bool has_foul_counter;
    uint32_t foul_counter;
    /* The number of consecutive ball placement failures of this team */
    bool has_ball_placement_failures;
    uint32_t ball_placement_failures;
    /* Indicate if the team is able and allowed to place the ball */
    bool has_can_place_ball;
    bool can_place_ball;
    /* The maximum number of bots allowed on the field based on division and cards */
    bool has_max_allowed_bots;
    uint32_t max_allowed_bots;
    /* The team has submitted an intent to substitute one or more robots at the next chance */
    bool has_bot_substitution_intent;
    bool bot_substitution_intent;
    /* Indicate if the team reached the maximum allowed ball placement failures and is thus not allowed to place the ball anymore */
    bool has_ball_placement_failures_reached;
    bool ball_placement_failures_reached;
} Referee_TeamInfo;

/* The coordinates of the Designated Position. These are measured in
 millimetres and correspond to SSL-Vision coordinates. These fields are
 always either both present (in the case of a ball placement command) or
 both absent (in the case of any other command). */
typedef struct _Referee_Point {
    float x;
    float y;
} Referee_Point;

/* Each UDP packet contains one of these messages. */
typedef struct _Referee {
    /* The UNIX timestamp when the packet was sent, in microseconds.
 Divide by 1,000,000 to get a time_t. */
    uint64_t packet_timestamp;
    Referee_Stage stage;
    /* The number of microseconds left in the stage.
 The following stages have this value; the rest do not:
 NORMAL_FIRST_HALF
 NORMAL_HALF_TIME
 NORMAL_SECOND_HALF
 EXTRA_TIME_BREAK
 EXTRA_FIRST_HALF
 EXTRA_HALF_TIME
 EXTRA_SECOND_HALF
 PENALTY_SHOOTOUT_BREAK

 If the stage runs over its specified time, this value
 becomes negative. */
    bool has_stage_time_left;
    int32_t stage_time_left;
    Referee_Command command;
    /* The number of commands issued since startup (mod 2^32). */
    uint32_t command_counter;
    /* The UNIX timestamp when the command was issued, in microseconds.
 This value changes only when a new command is issued, not on each packet. */
    uint64_t command_timestamp;
    /* Information about the two teams. */
    Referee_TeamInfo yellow;
    Referee_TeamInfo blue;
    bool has_designated_position;
    Referee_Point designated_position;
    /* Information about the direction of play.
 True, if the blue team will have it's goal on the positive x-axis of the ssl-vision coordinate system.
 Obviously, the yellow team will play on the opposite half. */
    bool has_blue_team_on_positive_half;
    bool blue_team_on_positive_half;
    /* The command that will be issued after the current stoppage and ball placement to continue the game. */
    bool has_next_command;
    Referee_Command next_command;
    /* The time in microseconds that is remaining until the current action times out
 The time will not be reset. It can get negative.
 An autoRef would raise an appropriate event, if the time gets negative.
 Possible actions where this time is relevant:
  * free kicks
  * kickoff, penalty kick, force start
  * ball placement */
    bool has_current_action_time_remaining;
    int32_t current_action_time_remaining;
    pb_callback_t game_events;
    pb_callback_t game_event_proposals;
} Referee;

/* List of matching proposals */
typedef struct _GameEventProposalGroup {
    /* The proposed game event. */
    pb_callback_t game_event;
    /* Whether the proposal group was accepted */
    bool has_accepted;
    bool accepted;
} GameEventProposalGroup;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _Referee_Stage_MIN Referee_Stage_NORMAL_FIRST_HALF_PRE
#define _Referee_Stage_MAX Referee_Stage_POST_GAME
#define _Referee_Stage_ARRAYSIZE ((Referee_Stage)(Referee_Stage_POST_GAME+1))

#define _Referee_Command_MIN Referee_Command_HALT
#define _Referee_Command_MAX Referee_Command_BALL_PLACEMENT_BLUE
#define _Referee_Command_ARRAYSIZE ((Referee_Command)(Referee_Command_BALL_PLACEMENT_BLUE+1))

#define Referee_stage_ENUMTYPE Referee_Stage
#define Referee_command_ENUMTYPE Referee_Command
#define Referee_next_command_ENUMTYPE Referee_Command





/* Initializer values for message structs */
#define Referee_init_default                     {0, _Referee_Stage_MIN, false, 0, _Referee_Command_MIN, 0, 0, Referee_TeamInfo_init_default, Referee_TeamInfo_init_default, false, Referee_Point_init_default, false, 0, false, _Referee_Command_MIN, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define Referee_TeamInfo_init_default            {{{NULL}, NULL}, 0, 0, {{NULL}, NULL}, 0, 0, 0, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define Referee_Point_init_default               {0, 0}
#define GameEventProposalGroup_init_default      {{{NULL}, NULL}, false, 0}
#define Referee_init_zero                        {0, _Referee_Stage_MIN, false, 0, _Referee_Command_MIN, 0, 0, Referee_TeamInfo_init_zero, Referee_TeamInfo_init_zero, false, Referee_Point_init_zero, false, 0, false, _Referee_Command_MIN, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define Referee_TeamInfo_init_zero               {{{NULL}, NULL}, 0, 0, {{NULL}, NULL}, 0, 0, 0, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define Referee_Point_init_zero                  {0, 0}
#define GameEventProposalGroup_init_zero         {{{NULL}, NULL}, false, 0}

/* Field tags (for use in manual encoding/decoding) */
#define Referee_TeamInfo_name_tag                1
#define Referee_TeamInfo_score_tag               2
#define Referee_TeamInfo_red_cards_tag           3
#define Referee_TeamInfo_yellow_card_times_tag   4
#define Referee_TeamInfo_yellow_cards_tag        5
#define Referee_TeamInfo_timeouts_tag            6
#define Referee_TeamInfo_timeout_time_tag        7
#define Referee_TeamInfo_goalkeeper_tag          8
#define Referee_TeamInfo_foul_counter_tag        9
#define Referee_TeamInfo_ball_placement_failures_tag 10
#define Referee_TeamInfo_can_place_ball_tag      12
#define Referee_TeamInfo_max_allowed_bots_tag    13
#define Referee_TeamInfo_bot_substitution_intent_tag 14
#define Referee_TeamInfo_ball_placement_failures_reached_tag 15
#define Referee_Point_x_tag                      1
#define Referee_Point_y_tag                      2
#define Referee_packet_timestamp_tag             1
#define Referee_stage_tag                        2
#define Referee_stage_time_left_tag              3
#define Referee_command_tag                      4
#define Referee_command_counter_tag              5
#define Referee_command_timestamp_tag            6
#define Referee_yellow_tag                       7
#define Referee_blue_tag                         8
#define Referee_designated_position_tag          9
#define Referee_blue_team_on_positive_half_tag   10
#define Referee_next_command_tag                 12
#define Referee_current_action_time_remaining_tag 15
#define Referee_game_events_tag                  16
#define Referee_game_event_proposals_tag         17
#define GameEventProposalGroup_game_event_tag    1
#define GameEventProposalGroup_accepted_tag      2

/* Struct field encoding specification for nanopb */
#define Referee_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT64,   packet_timestamp,   1) \
X(a, STATIC,   REQUIRED, UENUM,    stage,             2) \
X(a, STATIC,   OPTIONAL, SINT32,   stage_time_left,   3) \
X(a, STATIC,   REQUIRED, UENUM,    command,           4) \
X(a, STATIC,   REQUIRED, UINT32,   command_counter,   5) \
X(a, STATIC,   REQUIRED, UINT64,   command_timestamp,   6) \
X(a, STATIC,   REQUIRED, MESSAGE,  yellow,            7) \
X(a, STATIC,   REQUIRED, MESSAGE,  blue,              8) \
X(a, STATIC,   OPTIONAL, MESSAGE,  designated_position,   9) \
X(a, STATIC,   OPTIONAL, BOOL,     blue_team_on_positive_half,  10) \
X(a, STATIC,   OPTIONAL, UENUM,    next_command,     12) \
X(a, STATIC,   OPTIONAL, INT32,    current_action_time_remaining,  15) \
X(a, CALLBACK, REPEATED, MESSAGE,  game_events,      16) \
X(a, CALLBACK, REPEATED, MESSAGE,  game_event_proposals,  17)
#define Referee_CALLBACK pb_default_field_callback
#define Referee_DEFAULT NULL
#define Referee_yellow_MSGTYPE Referee_TeamInfo
#define Referee_blue_MSGTYPE Referee_TeamInfo
#define Referee_designated_position_MSGTYPE Referee_Point
#define Referee_game_events_MSGTYPE GameEvent
#define Referee_game_event_proposals_MSGTYPE GameEventProposalGroup

#define Referee_TeamInfo_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   name,              1) \
X(a, STATIC,   REQUIRED, UINT32,   score,             2) \
X(a, STATIC,   REQUIRED, UINT32,   red_cards,         3) \
X(a, CALLBACK, REPEATED, UINT32,   yellow_card_times,   4) \
X(a, STATIC,   REQUIRED, UINT32,   yellow_cards,      5) \
X(a, STATIC,   REQUIRED, UINT32,   timeouts,          6) \
X(a, STATIC,   REQUIRED, UINT32,   timeout_time,      7) \
X(a, STATIC,   REQUIRED, UINT32,   goalkeeper,        8) \
X(a, STATIC,   OPTIONAL, UINT32,   foul_counter,      9) \
X(a, STATIC,   OPTIONAL, UINT32,   ball_placement_failures,  10) \
X(a, STATIC,   OPTIONAL, BOOL,     can_place_ball,   12) \
X(a, STATIC,   OPTIONAL, UINT32,   max_allowed_bots,  13) \
X(a, STATIC,   OPTIONAL, BOOL,     bot_substitution_intent,  14) \
X(a, STATIC,   OPTIONAL, BOOL,     ball_placement_failures_reached,  15)
#define Referee_TeamInfo_CALLBACK pb_default_field_callback
#define Referee_TeamInfo_DEFAULT NULL

#define Referee_Point_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, FLOAT,    x,                 1) \
X(a, STATIC,   REQUIRED, FLOAT,    y,                 2)
#define Referee_Point_CALLBACK NULL
#define Referee_Point_DEFAULT NULL

#define GameEventProposalGroup_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  game_event,        1) \
X(a, STATIC,   OPTIONAL, BOOL,     accepted,          2)
#define GameEventProposalGroup_CALLBACK pb_default_field_callback
#define GameEventProposalGroup_DEFAULT NULL
#define GameEventProposalGroup_game_event_MSGTYPE GameEvent

extern const pb_msgdesc_t Referee_msg;
extern const pb_msgdesc_t Referee_TeamInfo_msg;
extern const pb_msgdesc_t Referee_Point_msg;
extern const pb_msgdesc_t GameEventProposalGroup_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Referee_fields &Referee_msg
#define Referee_TeamInfo_fields &Referee_TeamInfo_msg
#define Referee_Point_fields &Referee_Point_msg
#define GameEventProposalGroup_fields &GameEventProposalGroup_msg

/* Maximum encoded size of messages (where known) */
/* Referee_size depends on runtime parameters */
/* Referee_TeamInfo_size depends on runtime parameters */
/* GameEventProposalGroup_size depends on runtime parameters */
#define Referee_Point_size                       10

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
