/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8-dev */

#ifndef PB_SSL_GC_COMMON_PB_H_INCLUDED
#define PB_SSL_GC_COMMON_PB_H_INCLUDED
#include "pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* Team is either blue or yellow */
typedef enum _Team {
    /* team not set */
    Team_UNKNOWN = 0,
    /* yellow team */
    Team_YELLOW = 1,
    /* blue team */
    Team_BLUE = 2
} Team;

/* Division denotes the current division, which influences some rules */
typedef enum _Division {
    Division_DIV_UNKNOWN = 0,
    Division_DIV_A = 1,
    Division_DIV_B = 2
} Division;

/* Struct definitions */
/* RobotId is the combination of a team and a robot id */
typedef struct _RobotId {
    /* the robot number */
    bool has_id;
    uint32_t id;
    /* the team that the robot belongs to */
    bool has_team;
    Team team;
} RobotId;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _Team_MIN Team_UNKNOWN
#define _Team_MAX Team_BLUE
#define _Team_ARRAYSIZE ((Team)(Team_BLUE+1))

#define _Division_MIN Division_DIV_UNKNOWN
#define _Division_MAX Division_DIV_B
#define _Division_ARRAYSIZE ((Division)(Division_DIV_B+1))

#define RobotId_team_ENUMTYPE Team


/* Initializer values for message structs */
#define RobotId_init_default                     {false, 0, false, _Team_MIN}
#define RobotId_init_zero                        {false, 0, false, _Team_MIN}

/* Field tags (for use in manual encoding/decoding) */
#define RobotId_id_tag                           1
#define RobotId_team_tag                         2

/* Struct field encoding specification for nanopb */
#define RobotId_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   id,                1) \
X(a, STATIC,   OPTIONAL, UENUM,    team,              2)
#define RobotId_CALLBACK NULL
#define RobotId_DEFAULT NULL

extern const pb_msgdesc_t RobotId_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define RobotId_fields &RobotId_msg

/* Maximum encoded size of messages (where known) */
#define RobotId_size                             8

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
